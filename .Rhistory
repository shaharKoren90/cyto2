mds=t$eigen.vectors
g_mds=ggplot2::qplot(x=mds[,1],y=mds[,2],col=edge_r_counts$samples$group)+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(col='Group',x='MDS1',y='MDS2')
g_mds
?limma::plotMDS
limma::plotMDS
t=limma::plotMDS(edge_r_counts,plot=F)
mds=t$eigen.vectors
g_mds=ggplot2::qplot(x=mds[,1],y=mds[,2],col=edge_r_counts$samples$group)+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(col='Group',x='MDS1',y='MDS2')
g_mds
View(sample_ano)
design=model.matrix(~group=edge_r_counts$samples$group)
design=model.matrix(~edge_r_counts$samples$group)
design
colnames(design)[2]='group'
#estimate dispersion
edge_r_counts <- estimateDisp(edge_r_counts, design, robust=TRUE)
bcv_plot=edgeR::plotBCV(edge_r_counts)
#estimate dispersion
edge_r_counts <- edgeR::estimateDisp(edge_r_counts, design, robust=TRUE)
bcv_plot=edgeR::plotBCV(edge_r_counts)
?edgeR::plotBCV
bcv_plot=edgeR::plotBCV(edge_r_counts,plot=F)
#fit the model
fit <- edgeR::glmQLFit(edge_r_counts, design)
qlf <- edgeR::glmQLFTest(fit, coef=group_col_name)
design
design=model.matrix(~edge_r_counts$samples$group)
colnames(design)[2]=group_col_name
#fit the model
fit <- edgeR::glmQLFit(edge_r_counts, design)
qlf <- edgeR::glmQLFTest(fit, coef=group_col_name)
dif_exp_results=topTags(qlf,n=nrow(edge_r_counts))$table
dif_exp_results=edgeR::topTags(qlf,n=nrow(edge_r_counts))$table
View(dif_exp_results)
View(dif_exp_results)
colnames(dif_exp_results)
#create a sub data for ggrepel
top10_up=dif_exp_results %>% dplyr::filter(logFC>0 & !is.na(SYMBOL)) %>% dplyr::slice(1:10)
top10_up
top10_down=dif_exp_results %>% dplyr::filter(logFC<0 & !is.na(SYMBOL)) %>% dplyr::slice(1:10)
top=dplyr::bind_rows(top10_down,top10_up)
colnames(dif_exp_results$FDR<0.05)
#create the plot
g=ggplot2::ggplot(dif_exp_results,aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+geom_point()+geom_text_repel(data=top10_genes_sub_data,aes(label =gene_symbol))+theme_bw(base_size = 18)+scale_color_manual(values = c('red','black'))
usethis::use_package("ggrepel")
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,aes(label =gene_symbol))+theme_bw(base_size = 18)+scale_color_manual(values = c('red','black'))
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =gene_symbol))+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g
top
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =SYMBOL))+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g
table(dif_exp_results$FDR<0.05)
top
View(top)
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =SYMBOL),col='blue')+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g
top10_up
top
nrow(top)
#create a sub data for ggrepel
top10_up=dif_exp_results %>% dplyr::filter(logFC>0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top10_down=dif_exp_results %>% dplyr::filter(logFC<0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top=dplyr::bind_rows(top10_down,top10_up)
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =SYMBOL),col='blue')+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g=ggplot2::g+labs(x='log FC normal vs lesional',col='In top 100 anotated genes')
g
volcano_plot=g+ggplot2:theme(legend.position="top")
volcano_plot
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =SYMBOL),col='blue')+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g=ggplot2::g+labs(x='log FC normal vs lesional',col='In top 100 anotated genes')
volcano_plot=g+ggplot2:theme(legend.position="top")
volcano_plot=g+ggplot2::theme(legend.position="top")
volcano_plot
up_in_group=dif_exp_results$SYMBOL[dif_exp_results$FDR<0.05 & dif_exp_results$logFC>log2(1.5)]
down_in_group=dif_exp_results$SYMBOL[dif_exp_results$FDR<0.05 & dif_exp_results$logFC<log2(1/1.5)]
up_in_group
length(up_in_group)
length(down_in_group)
#run enrichment
enriched_up <- enrichR::enrichr(up_in_normal, dbs)$GO_Biological_Process_2021
#run enrichment
enriched_up <- enrichR::enrichr(up_in_group, dbs)$GO_Biological_Process_2021
#run enrichment
enrichR::setEnrichrSite()
library(enrichR)
detach("package:enrichR", unload = TRUE)
#run enrichment
enrichR::setEnrichrSite("Enrichr")
enriched_up <- enrichR::enrichr(up_in_group, dbs)$GO_Biological_Process_2021
dbs <- c("GO_Biological_Process_2021")
enriched_up <- enrichR::enrichr(up_in_group, dbs)$GO_Biological_Process_2021
enriched_down <- enrichR::enrichr(down_in_group, dbs)$GO_Biological_Process_2021
#remove the GO number from term name for easy plotting
enriched_up$short_name=strsplit(enriched_up$Term,'(G',fixed = T) %>% sapply('[',1)
enriched_down$short_name=strsplit(enriched_down$Term,'(G',fixed = T) %>% sapply('[',1)
#remove the GO number from term name for easy plotting
enriched_up$short_name=strsplit(enriched_up$Term,'(G',fixed = T) %>% sapply('[',1)
enriched_down$short_name=strsplit(enriched_down$Term,'(G',fixed = T) %>% sapply('[',1)
#order the levels according to p.value to get the plot with ordered p.value
enriched_up$short_name=factor(enriched_up$short_name,levels = rev(enriched_up$short_name))
enriched_down$short_name=factor(enriched_down$short_name,levels = rev(enriched_down$short_name))
#plot the top 10 terms
p_normal=ggplot(enriched_up[1:10,],aes(x=short_name,y=-log10(P.value)))+geom_bar(stat="identity")+coord_flip()+theme_bw(base_size = 18)+labs(x='Term',y='-log10(P)',title = 'Enriched in normal')
#plot the top 10 terms
p_normal=ggplot2::ggplot(enriched_up[1:10,],ggplot2::aes(x=short_name,y=-log10(P.value)))+ggplot2::geom_bar(stat="identity")+ggplot2::coord_flip()+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(x='Term',y='-log10(P)',title = 'Enriched in upregulated genes')
p_normal
p_lesional=ggplot(enriched_down[1:10,],aes(x=short_name,y=-log10(P.value)))+geom_bar(stat="identity")+coord_flip()+theme_bw(base_size = 18)+labs(x='Term',y='-log10(P)',title = 'Enriched in downregulated genes')
p_lesional=ggplot2::ggplot(enriched_down[1:10,],ggplot2::aes(x=short_name,y=-log10(P.value)))+ggplot2::geom_bar(stat="identity")+ggplot2::coord_flip()+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(x='Term',y='-log10(P)',title = 'Enriched in downregulated genes')
p_lesional
run_differncial_expression=function(ExpressionSet_data,group_col_name,cpm_saf=1,sampels_per=0.9,use_tmm=T,create_plots=T,desian=NULL) {
if(class(ExpressionSet_data)[1]!='ExpressionSet') {
stop("Data must be an ExpressionSet data")
}
#get count matrix
count_matrix=Biobase::exprs(ExpressionSet_data)
#get group vector
group_vec=ExpressionSet_data[[group_col_name]]
#get gene annotaton
gene_ano=ExpressionSet_data@featureData@data
#create an  edgeR object
edge_r_counts <- edgeR::DGEList(counts=count_matrix, group=group_vec,genes = gene_ano)
#remove unexpressed genes
#get the size of the smallest group
min_goroup_size=min(table(edge_r_counts$samples$group))
keep <- rowSums(edgeR::cpm(edge_r_counts)>=cpm_saf) >= min_goroup_size*sampels_per
print(paste('Retaining',sum(keep),'genes, out of',length(keep),'genes'))
edge_r_counts=edge_r_counts[keep,]
#calculate normalization factors using TMM
edge_r_counts <- edgeR::calcNormFactors(edge_r_counts)
#test normalization factors distribution between groups
if(create_plots==T) {
norm_factor_diagnostic=ggplot2::ggplot(edge_r_counts$samples,ggplot2::aes(x=group,y=norm.factors))+ggplot2::geom_boxplot()+ggplot2::labs(x='',y='Normalization factor')+ggplot2::theme_bw(base_size = 18)
}
#test what proportion of expression arises from the top 10 genes, used to determine the need for TMM normalization
if(create_plots==T) {
proortion_of_top_10=apply(edgeR::cpm(edge_r_counts),2, top10prop)
top_10_exp=ggplot2::qplot(x=edge_r_counts$samples$group,y=proortion_of_top_10,geom='boxplot',xlab = '',ylab ='Proportion of expression\n from top 10 genes')+ggplot2::theme_bw(base_size = 18)
}
#Plot mds
if(create_plots==T) {
t=limma::plotMDS(edge_r_counts,plot=F)
mds=t$eigen.vectors
g_mds=ggplot2::qplot(x=mds[,1],y=mds[,2],col=edge_r_counts$samples$group)+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(col='Group',x='MDS1',y='MDS2')
}
#run differential expression
#if design matrix not provided create one
if(is.null(design)) {
design=model.matrix(~edge_r_counts$samples$group)
colnames(design)[2]=group_col_name
}
#estimate dispersion
edge_r_counts <- edgeR::estimateDisp(edge_r_counts, design, robust=TRUE)
#fit the model
fit <- edgeR::glmQLFit(edge_r_counts, design)
qlf <- edgeR::glmQLFTest(fit, coef=group_col_name)
dif_exp_results=edgeR::topTags(qlf,n=nrow(edge_r_counts))$table
#plot volcano
if(create_plots) {
#create a sub data for ggrepel
top10_up=dif_exp_results %>% dplyr::filter(logFC>0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top10_down=dif_exp_results %>% dplyr::filter(logFC<0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top=dplyr::bind_rows(top10_down,top10_up)
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =SYMBOL),col='blue')+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g=ggplot2::g+labs(x='log FC normal vs lesional',col='In top 100 anotated genes')
volcano_plot=g+ggplot2::theme(legend.position="top")
}
if(create_plots) {
dbs <- c("GO_Biological_Process_2021")
up_in_group=dif_exp_results$SYMBOL[dif_exp_results$FDR<0.05 & dif_exp_results$logFC>log2(1.5)]
down_in_group=dif_exp_results$SYMBOL[dif_exp_results$FDR<0.05 & dif_exp_results$logFC<log2(1/1.5)]
#run enrichment
enrichR::setEnrichrSite("Enrichr")
enriched_up <- enrichR::enrichr(up_in_group, dbs)$GO_Biological_Process_2021
enriched_down <- enrichR::enrichr(down_in_group, dbs)$GO_Biological_Process_2021
#remove the GO number from term name for easy plotting
enriched_up$short_name=strsplit(enriched_up$Term,'(G',fixed = T) %>% sapply('[',1)
enriched_down$short_name=strsplit(enriched_down$Term,'(G',fixed = T) %>% sapply('[',1)
#order the levels according to p.value to get the plot with ordered p.value
enriched_up$short_name=factor(enriched_up$short_name,levels = rev(enriched_up$short_name))
enriched_down$short_name=factor(enriched_down$short_name,levels = rev(enriched_down$short_name))
#plot the top 10 terms
enriched_up_p=ggplot2::ggplot(enriched_up[1:10,],ggplot2::aes(x=short_name,y=-log10(P.value)))+ggplot2::geom_bar(stat="identity")+ggplot2::coord_flip()+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(x='Term',y='-log10(P)',title = 'Enriched in upregulated genes')
enriched_down_p=ggplot2::ggplot(enriched_down[1:10,],ggplot2::aes(x=short_name,y=-log10(P.value)))+ggplot2::geom_bar(stat="identity")+ggplot2::coord_flip()+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(x='Term',y='-log10(P)',title = 'Enriched in downregulated genes')
}
if(create_plots==T) {
return(list(dif_exp_results=dif_exp_results,enriched_go_up_plot=enriched_up_p,enriched_go_down_plot=enriched_down_p,
enriched_go_up_stats=enriched_up,enriched_go_down_stats=enriched_down,
norm_factor_diagnostic_plot=norm_factor_diagnostic,mds_plot=g_mds,
volcano_plot=volcano_plot))
} else {
return(dif_exp_results)
}
}
run_differncial_expression(ExpressionSet_data,'type')
group_col_name='type'
#get count matrix
count_matrix=Biobase::exprs(ExpressionSet_data)
#get group vector
group_vec=ExpressionSet_data[[group_col_name]]
#get gene annotaton
gene_ano=ExpressionSet_data@featureData@data
#create an  edgeR object
edge_r_counts <- edgeR::DGEList(counts=count_matrix, group=group_vec,genes = gene_ano)
#remove unexpressed genes
#get the size of the smallest group
min_goroup_size=min(table(edge_r_counts$samples$group))
keep <- rowSums(edgeR::cpm(edge_r_counts)>=cpm_saf) >= min_goroup_size*sampels_per
print(paste('Retaining',sum(keep),'genes, out of',length(keep),'genes'))
edge_r_counts=edge_r_counts[keep,]
#calculate normalization factors using TMM
edge_r_counts <- edgeR::calcNormFactors(edge_r_counts)
norm_factor_diagnostic=ggplot2::ggplot(edge_r_counts$samples,ggplot2::aes(x=group,y=norm.factors))+ggplot2::geom_boxplot()+ggplot2::labs(x='',y='Normalization factor')+ggplot2::theme_bw(base_size = 18)
proortion_of_top_10=apply(edgeR::cpm(edge_r_counts),2, top10prop)
top_10_exp=ggplot2::qplot(x=edge_r_counts$samples$group,y=proortion_of_top_10,geom='boxplot',xlab = '',ylab ='Proportion of expression\n from top 10 genes')+ggplot2::theme_bw(base_size = 18)
t=limma::plotMDS(edge_r_counts,plot=F)
mds=t$eigen.vectors
g_mds=ggplot2::qplot(x=mds[,1],y=mds[,2],col=edge_r_counts$samples$group)+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(col='Group',x='MDS1',y='MDS2')
design=model.matrix(~edge_r_counts$samples$group)
colnames(design)[2]=group_col_name
#estimate dispersion
edge_r_counts <- edgeR::estimateDisp(edge_r_counts, design, robust=TRUE)
#fit the model
fit <- edgeR::glmQLFit(edge_r_counts, design)
qlf <- edgeR::glmQLFTest(fit, coef=group_col_name)
dif_exp_results=edgeR::topTags(qlf,n=nrow(edge_r_counts))$table
#create a sub data for ggrepel
top10_up=dif_exp_results %>% dplyr::filter(logFC>0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top10_down=dif_exp_results %>% dplyr::filter(logFC<0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top=dplyr::bind_rows(top10_down,top10_up)
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =SYMBOL),col='blue')+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g=ggplot2::g+labs(x='log FC normal vs lesional',col='In top 100 anotated genes')
run_differncial_expression=function(ExpressionSet_data,group_col_name,cpm_saf=1,sampels_per=0.9,use_tmm=T,create_plots=T,desian=NULL) {
if(class(ExpressionSet_data)[1]!='ExpressionSet') {
stop("Data must be an ExpressionSet data")
}
#get count matrix
count_matrix=Biobase::exprs(ExpressionSet_data)
#get group vector
group_vec=ExpressionSet_data[[group_col_name]]
#get gene annotaton
gene_ano=ExpressionSet_data@featureData@data
#create an  edgeR object
edge_r_counts <- edgeR::DGEList(counts=count_matrix, group=group_vec,genes = gene_ano)
#remove unexpressed genes
#get the size of the smallest group
min_goroup_size=min(table(edge_r_counts$samples$group))
keep <- rowSums(edgeR::cpm(edge_r_counts)>=cpm_saf) >= min_goroup_size*sampels_per
print(paste('Retaining',sum(keep),'genes, out of',length(keep),'genes'))
edge_r_counts=edge_r_counts[keep,]
#calculate normalization factors using TMM
edge_r_counts <- edgeR::calcNormFactors(edge_r_counts)
#test normalization factors distribution between groups
if(create_plots==T) {
norm_factor_diagnostic=ggplot2::ggplot(edge_r_counts$samples,ggplot2::aes(x=group,y=norm.factors))+ggplot2::geom_boxplot()+ggplot2::labs(x='',y='Normalization factor')+ggplot2::theme_bw(base_size = 18)
}
#test what proportion of expression arises from the top 10 genes, used to determine the need for TMM normalization
if(create_plots==T) {
proortion_of_top_10=apply(edgeR::cpm(edge_r_counts),2, top10prop)
top_10_exp=ggplot2::qplot(x=edge_r_counts$samples$group,y=proortion_of_top_10,geom='boxplot',xlab = '',ylab ='Proportion of expression\n from top 10 genes')+ggplot2::theme_bw(base_size = 18)
}
#Plot mds
if(create_plots==T) {
t=limma::plotMDS(edge_r_counts,plot=F)
mds=t$eigen.vectors
g_mds=ggplot2::qplot(x=mds[,1],y=mds[,2],col=edge_r_counts$samples$group)+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(col='Group',x='MDS1',y='MDS2')
}
#run differential expression
#if design matrix not provided create one
if(is.null(design)) {
design=model.matrix(~edge_r_counts$samples$group)
colnames(design)[2]=group_col_name
}
#estimate dispersion
edge_r_counts <- edgeR::estimateDisp(edge_r_counts, design, robust=TRUE)
#fit the model
fit <- edgeR::glmQLFit(edge_r_counts, design)
qlf <- edgeR::glmQLFTest(fit, coef=group_col_name)
dif_exp_results=edgeR::topTags(qlf,n=nrow(edge_r_counts))$table
#plot volcano
if(create_plots) {
#create a sub data for ggrepel
top10_up=dif_exp_results %>% dplyr::filter(logFC>0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top10_down=dif_exp_results %>% dplyr::filter(logFC<0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top=dplyr::bind_rows(top10_down,top10_up)
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =SYMBOL),col='blue')+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g=g+labs(x='log FC normal vs lesional',col='In top 100 anotated genes')
volcano_plot=g+ggplot2::theme(legend.position="top")
}
if(create_plots) {
dbs <- c("GO_Biological_Process_2021")
up_in_group=dif_exp_results$SYMBOL[dif_exp_results$FDR<0.05 & dif_exp_results$logFC>log2(1.5)]
down_in_group=dif_exp_results$SYMBOL[dif_exp_results$FDR<0.05 & dif_exp_results$logFC<log2(1/1.5)]
#run enrichment
enrichR::setEnrichrSite("Enrichr")
enriched_up <- enrichR::enrichr(up_in_group, dbs)$GO_Biological_Process_2021
enriched_down <- enrichR::enrichr(down_in_group, dbs)$GO_Biological_Process_2021
#remove the GO number from term name for easy plotting
enriched_up$short_name=strsplit(enriched_up$Term,'(G',fixed = T) %>% sapply('[',1)
enriched_down$short_name=strsplit(enriched_down$Term,'(G',fixed = T) %>% sapply('[',1)
#order the levels according to p.value to get the plot with ordered p.value
enriched_up$short_name=factor(enriched_up$short_name,levels = rev(enriched_up$short_name))
enriched_down$short_name=factor(enriched_down$short_name,levels = rev(enriched_down$short_name))
#plot the top 10 terms
enriched_up_p=ggplot2::ggplot(enriched_up[1:10,],ggplot2::aes(x=short_name,y=-log10(P.value)))+ggplot2::geom_bar(stat="identity")+ggplot2::coord_flip()+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(x='Term',y='-log10(P)',title = 'Enriched in upregulated genes')
enriched_down_p=ggplot2::ggplot(enriched_down[1:10,],ggplot2::aes(x=short_name,y=-log10(P.value)))+ggplot2::geom_bar(stat="identity")+ggplot2::coord_flip()+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(x='Term',y='-log10(P)',title = 'Enriched in downregulated genes')
}
if(create_plots==T) {
return(list(dif_exp_results=dif_exp_results,enriched_go_up_plot=enriched_up_p,enriched_go_down_plot=enriched_down_p,
enriched_go_up_stats=enriched_up,enriched_go_down_stats=enriched_down,
norm_factor_diagnostic_plot=norm_factor_diagnostic,mds_plot=g_mds,
volcano_plot=volcano_plot))
} else {
return(dif_exp_results)
}
}
run_differncial_expression(ExpressionSet_data,'type')
run_differncial_expression=function(ExpressionSet_data,group_col_name,cpm_saf=1,sampels_per=0.9,use_tmm=T,create_plots=T,desian=NULL) {
if(class(ExpressionSet_data)[1]!='ExpressionSet') {
stop("Data must be an ExpressionSet data")
}
#get count matrix
count_matrix=Biobase::exprs(ExpressionSet_data)
#get group vector
group_vec=ExpressionSet_data[[group_col_name]]
#get gene annotaton
gene_ano=ExpressionSet_data@featureData@data
#create an  edgeR object
edge_r_counts <- edgeR::DGEList(counts=count_matrix, group=group_vec,genes = gene_ano)
#remove unexpressed genes
#get the size of the smallest group
min_goroup_size=min(table(edge_r_counts$samples$group))
keep <- rowSums(edgeR::cpm(edge_r_counts)>=cpm_saf) >= min_goroup_size*sampels_per
print(paste('Retaining',sum(keep),'genes, out of',length(keep),'genes'))
edge_r_counts=edge_r_counts[keep,]
#calculate normalization factors using TMM
edge_r_counts <- edgeR::calcNormFactors(edge_r_counts)
#test normalization factors distribution between groups
if(create_plots==T) {
norm_factor_diagnostic=ggplot2::ggplot(edge_r_counts$samples,ggplot2::aes(x=group,y=norm.factors))+ggplot2::geom_boxplot()+ggplot2::labs(x='',y='Normalization factor')+ggplot2::theme_bw(base_size = 18)
}
#test what proportion of expression arises from the top 10 genes, used to determine the need for TMM normalization
if(create_plots==T) {
proortion_of_top_10=apply(edgeR::cpm(edge_r_counts),2, top10prop)
top_10_exp=ggplot2::qplot(x=edge_r_counts$samples$group,y=proortion_of_top_10,geom='boxplot',xlab = '',ylab ='Proportion of expression\n from top 10 genes')+ggplot2::theme_bw(base_size = 18)
}
#Plot mds
if(create_plots==T) {
t=limma::plotMDS(edge_r_counts,plot=F)
mds=t$eigen.vectors
g_mds=ggplot2::qplot(x=mds[,1],y=mds[,2],col=edge_r_counts$samples$group)+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(col='Group',x='MDS1',y='MDS2')
}
#run differential expression
#if design matrix not provided create one
if(is.null(design)) {
design=model.matrix(~edge_r_counts$samples$group)
colnames(design)[2]=group_col_name
}
#estimate dispersion
edge_r_counts <- edgeR::estimateDisp(edge_r_counts, design, robust=TRUE)
#fit the model
fit <- edgeR::glmQLFit(edge_r_counts, design)
qlf <- edgeR::glmQLFTest(fit, coef=group_col_name)
dif_exp_results=edgeR::topTags(qlf,n=nrow(edge_r_counts))$table
#plot volcano
if(create_plots) {
#create a sub data for ggrepel
top10_up=dif_exp_results %>% dplyr::filter(logFC>0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top10_down=dif_exp_results %>% dplyr::filter(logFC<0 & !is.na(SYMBOL)) %>% dplyr::slice(1:5)
top=dplyr::bind_rows(top10_down,top10_up)
#create the plot
g=ggplot2::ggplot(dif_exp_results,ggplot2::aes(y=-log10(PValue),x=logFC,col=FDR<0.05))+ggplot2::geom_point()+ggrepel::geom_text_repel(data=top,ggplot2::aes(label =SYMBOL),col='blue')+ggplot2::theme_bw(base_size = 18)+ggplot2::scale_color_manual(values = c('red','black'))
g=g+ggplot2::labs(x='log FC',col='FDR<0.05')
volcano_plot=g+ggplot2::theme(legend.position="top")
}
if(create_plots) {
dbs <- c("GO_Biological_Process_2021")
up_in_group=dif_exp_results$SYMBOL[dif_exp_results$FDR<0.05 & dif_exp_results$logFC>log2(1.5)]
down_in_group=dif_exp_results$SYMBOL[dif_exp_results$FDR<0.05 & dif_exp_results$logFC<log2(1/1.5)]
#run enrichment
enrichR::setEnrichrSite("Enrichr")
enriched_up <- enrichR::enrichr(up_in_group, dbs)$GO_Biological_Process_2021
enriched_down <- enrichR::enrichr(down_in_group, dbs)$GO_Biological_Process_2021
#remove the GO number from term name for easy plotting
enriched_up$short_name=strsplit(enriched_up$Term,'(G',fixed = T) %>% sapply('[',1)
enriched_down$short_name=strsplit(enriched_down$Term,'(G',fixed = T) %>% sapply('[',1)
#order the levels according to p.value to get the plot with ordered p.value
enriched_up$short_name=factor(enriched_up$short_name,levels = rev(enriched_up$short_name))
enriched_down$short_name=factor(enriched_down$short_name,levels = rev(enriched_down$short_name))
#plot the top 10 terms
enriched_up_p=ggplot2::ggplot(enriched_up[1:10,],ggplot2::aes(x=short_name,y=-log10(P.value)))+ggplot2::geom_bar(stat="identity")+ggplot2::coord_flip()+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(x='Term',y='-log10(P)',title = 'Enriched in upregulated genes')
enriched_down_p=ggplot2::ggplot(enriched_down[1:10,],ggplot2::aes(x=short_name,y=-log10(P.value)))+ggplot2::geom_bar(stat="identity")+ggplot2::coord_flip()+ggplot2::theme_bw(base_size = 18)+ggplot2::labs(x='Term',y='-log10(P)',title = 'Enriched in downregulated genes')
}
if(create_plots==T) {
return(list(dif_exp_results=dif_exp_results,enriched_go_up_plot=enriched_up_p,enriched_go_down_plot=enriched_down_p,
enriched_go_up_stats=enriched_up,enriched_go_down_stats=enriched_down,
norm_factor_diagnostic_plot=norm_factor_diagnostic,mds_plot=g_mds,
volcano_plot=volcano_plot))
} else {
return(dif_exp_results)
}
}
run_differncial_expression(ExpressionSet_data,'type')
res=run_differncial_expression(ExpressionSet_data,'type')
?read.csv
?head
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
use_mit_license()
usethis::use_mit_license()
devtools::check()
usethis::use_package("enrichR")
devtools::check()
?model.matrix
devtools::check()
devtools::build()
library(cyto)
usethis::use_testthat()
usethis::use_test
usethis::use_test()
usethis::use_test('read_expression_data')
testthat::test_path('two_files')
testthat::test_path()
?testthat::test_path()
testthat::test_path('testdata/two_files')
getwd()
setwd("~/Documents/task/cyto")
testthat::test_path('testdata/two_files')
read_expression_data("tests/testthat/testdata/two_files")
library(cyto)
read_expression_data("tests/testthat/testdata/two_files")
library(cyto)
read_expression_data("tests/testthat/testdata/two_files")
read_expression_data(folder_path="tests/testthat/testdata/two_files")
folder_path="tests/testthat/testdata/two_files"
files_in_folder_path=list.files(path =folder_path )
files_in_folder_path
count_matrix_path=test_if_file_can_be_read(files_in_folder_path,file_pattern = 'count',file_name = 'counts_matrix')
test_if_file_can_be_read=function(files_in_folder_path,file_pattern,file_name,folder_path_in=folder_path) {
file_path=files_in_folder_path[grep(file_pattern,files_in_folder_path)]
if(length(file_path)==0) {
stop(paste('Could not identify a',file_name,'in',folder_path_in,'please provide full path to the files or make sure the count file has counts in the file name'))
}
if(length(file_path)>1) {
stop(paste('More then 1',file_name, 'is present in',folder_path_in,'please provide a full path to the files'))
}
file_path=paste0(folder_path_in,file_path)
return(file_path)
}
count_matrix_path=test_if_file_can_be_read(files_in_folder_path,file_pattern = 'count',file_name = 'counts_matrix')
gene_ano_path=test_if_file_can_be_read(files_in_folder_path,file_pattern = 'gene.anno',file_name = 'gene annotation')
read_expression_data(folder_path="tests/testthat/testdata/two_files")
usethis::use_test("test_if_file_can_be_read")
test_if_file_can_be_read(files_in_folder_path=list.files( testthat::test_path('testdata/two_files')),
file_pattern='gene.anno',
folder_path_in=testthat::test_path('testdata/two_files')
)
test_if_file_can_be_read(files_in_folder_path=list.files( testthat::test_path('testdata/two_files')),
file_pattern='gene.anno',
file_name='gene annotation',
folder_path_in=testthat::test_path('testdata/two_files')
)
devtools::test()
devtools::test()
test_if_file_can_be_read(files_in_folder_path=list.files( testthat::test_path('testdata/two_files')),
file_pattern='gene.anno',
file_name='gene annotation',
folder_path_in=testthat::test_path('testdata/two_files')
)
devtools::test()
devtools::test()
st_if_file_can_be_read(files_in_folder_path=list.files( testthat::test_path('testdata/two_files')),
file_pattern='gene.anno',
file_name='gene annotation',
folder_path_in=testthat::test_path('testdata/two_files')
)
test_if_file_can_be_read(files_in_folder_path=list.files( testthat::test_path('testdata/two_files')),
file_pattern='gene.anno',
file_name='gene annotation',
folder_path_in=testthat::test_path('testdata/two_files')
)
usethis::use_test("read_expression_data")
devtools::test()
devtools::test()
usethis::use_test("get_cpm")
devtools::test()
devtools::document()
?test_if_file_can_be_read
?read_expression_data
?get_cpm
?filter_lowly_expressed_genes
